{"version":3,"sources":["data/index.js","constant/index.js","pages/main/Row.js","pages/main/Colunn.js","pages/main/index.js","App.js","reportWebVitals.js","index.js"],"names":["systemTypes","getName","type","faker","system","commonFileName","database","column","types","fakeData","getRandomData","currentColumnIdx","maxColumnCount","maxRow","actualMaxRow","count","Math","floor","random","isLastColmun","Array","map","round","children","label","checkingStatus","notChecked","checked","intermediate","checkAction","RowCheckBox","status","onStatusChange","className","onClick","action","fileChecked","dirChecked","includes","getAction","console","log","TypeIcon","Row","this","props","item","onFoldChange","onCheckingStatusChange","get","unfolded","itemCheckingStatus","title","React","Component","Column","tree","onRowFoldChange","onRowCheckingStatusChange","onLoadMoreClick","loadedRows","filter","loaded","hasUnloadedRows","some","rowIdx","foldState","getTree","data","idx","formattedItem","Main","updateFoldState","currentColIdx","targetColIdx","forEach","row","unfoldeditem","find","handleFoldChange","colIdx","state","setState","updateAllChildrenStatus","updateCheckingStatus","rowType","targetStatus","updateDirCheckingStatus","dirStatus","allChecked","every","someChecked","handleCheckingStatusChange","loadMore","moreCount","handleLoadMoreClick","columns","push","unfoldedItem","getColumns","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acd52f44.chunk.js","sourcesContent":["import faker from 'faker'\nexport const systemTypes = {\n  file: 'file',\n  dir: 'dir',\n}\nconst getName = (type) => {\n  if (type === systemTypes.file) return faker.system.commonFileName()\n  if (type === systemTypes.dir) return faker.database.column()\n  return ''\n}\n\nconst types = [systemTypes.file, systemTypes.dir]\nconst getRandomData = ({currentColumnIdx, maxColumnCount, maxRow}) => {\n  const actualMaxRow = currentColumnIdx === 0 ? 10 : maxRow\n  const count = Math.floor(Math.random() * actualMaxRow) + 1\n  const isLastColmun = currentColumnIdx === (maxColumnCount - 1)\n  const rows = [...Array(count)].map(() => {\n    const type =\n      isLastColmun ? systemTypes.file : types[Math.round(Math.random())]\n    if (type === systemTypes.dir) {\n      const children = getRandomData({\n        currentColumnIdx: currentColumnIdx + 1,\n        maxColumnCount,\n        maxRow\n      })\n      return {\n        type,\n        label: getName(type),\n        children,\n      }\n    } else {\n      return {\n        type,\n        label: getName(type),\n      }\n    }\n  })\n  return rows\n}\n\nexport const fakeData = getRandomData({\n  currentColumnIdx: 0,\n  maxColumnCount: 4,\n  maxRow: 20\n})\n\n","const checkingStatus = {\n  notChecked: 'notChecked',\n  checked: 'checked',\n  intermediate: 'intermediate'\n}\n\nconst checkAction = {\n  check: 'check',\n  uncheck: 'uncheck'\n}\n\nexport {\n  checkingStatus,\n  checkAction\n}\n","import React from 'react'\nimport { systemTypes } from '../../data'\nimport get from 'lodash.get'\nimport { checkAction, checkingStatus } from '../../constant'\n\nconst RowCheckBox = ({ status, onStatusChange, type }) => {\n  const map = {\n    [checkingStatus.checked]: <div className=\"status\">✅</div>,\n    [checkingStatus.notChecked]: <div className=\"status not_checked\"></div>,\n    [checkingStatus.intermediate]: <div className=\"status intermediate\"></div>,\n  }\n  const getAction = () => {\n    const fileChecked =\n      type === systemTypes.file && status === checkingStatus.checked\n    const dirChecked =\n      type === systemTypes.dir &&\n      [checkingStatus.checked, checkingStatus.intermediate].includes(status)\n    if (fileChecked || dirChecked) {\n      return checkAction.uncheck\n    }\n    return checkAction.check\n  }\n\n  return (\n    <div\n      className=\"checking_status\"\n      onClick={() => {\n        const action = getAction()\n        console.log(action)\n        onStatusChange(action)\n      }}\n    >\n      {map[status]}\n    </div>\n  )\n}\n\nconst TypeIcon = ({type}) => {\n  const typeMapIcon = {\n    [systemTypes.dir]: (<div className='type_icon'>🗂️</div>),\n    [systemTypes.file]: (<div className='type_icon'>📄</div>)\n  }\n  return typeMapIcon[type]\n}\n\nclass Row extends React.Component {\n  render() {\n    const { item, onFoldChange, onCheckingStatusChange } = this.props\n    const label = get(item, 'label', '')\n    const type = get(item, 'type', '')\n    const unfolded = get(item, 'unfolded', false)\n    const itemCheckingStatus = get(\n      item,\n      'checkingStatus',\n      checkingStatus.notChecked\n    )\n\n    return (\n      <div className=\"row\" key={label}>\n        <div className=\"row_info\">\n          <RowCheckBox\n            type={type}\n            status={itemCheckingStatus}\n            onStatusChange={(action) => {\n              onCheckingStatusChange(action)\n            }}\n          />\n          <div className=\"label\">\n            <div className='type_wrap'>\n              <TypeIcon type={type}/>\n            </div>\n            <div className='label_val' title={label}>{label}</div>\n          </div>\n        </div>\n        {type === systemTypes.dir && (\n          <div\n            className=\"fold_btn\"\n            onClick={() => {\n              onFoldChange(!unfolded)\n            }}\n          >\n            {unfolded ? <div>-</div> : <div>+</div>}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Row\n","import React from 'react'\nimport Row from './Row'\n\nclass Column extends React.Component {\n  render() {\n    const {\n      tree,\n      onRowFoldChange,\n      onRowCheckingStatusChange,\n      onLoadMoreClick,\n    } = this.props\n    const loadedRows = tree.filter((item) => item.loaded)\n    const hasUnloadedRows = tree.some((item) => !item.loaded)\n\n    return (\n      <div className=\"column\">\n        {loadedRows.map((item, rowIdx) => {\n          return (\n            <Row\n              key={rowIdx}\n              item={item}\n              onFoldChange={(foldState) => {\n                onRowFoldChange(rowIdx, foldState)\n              }}\n              onCheckingStatusChange={(action) => {\n                onRowCheckingStatusChange(rowIdx, action)\n              }}\n            />\n          )\n        })}\n        {hasUnloadedRows && (\n          <div className=\"load_more\">\n            <div\n              className=\"more_btn\"\n              onClick={() => {\n                onLoadMoreClick()\n              }}\n            >\n              Load More\n            </div>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Column\n","import './index.css'\nimport React from 'react'\nimport { fakeData, systemTypes } from '../../data/index'\nimport Column from './Colunn'\nimport { checkAction, checkingStatus } from '../../constant'\n\nconst getTree = (data) => {\n  const tree = data.map((item, idx) => {\n    const formattedItem = {\n      ...item,\n      checkingStatus: checkingStatus.notChecked,\n      loaded: idx < 10,\n    }\n\n    if (item.type === systemTypes.dir) {\n      formattedItem.unfolded = false\n      formattedItem.children = getTree(item.children)\n    }\n    return formattedItem\n  })\n  return tree\n}\n\nclass Main extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      tree: [],\n    }\n  }\n  componentDidMount() {\n    this.setState({ tree: getTree(fakeData) })\n  }\n  updateFoldState = ({\n    tree,\n    currentColIdx,\n    targetColIdx,\n    rowIdx,\n    foldState,\n  }) => {\n    if (currentColIdx === targetColIdx) {\n      tree[rowIdx].unfolded = foldState\n      tree.forEach((row, idx) => {\n        row.unfolded = idx === rowIdx ? foldState : false\n      })\n    } else {\n      const unfoldeditem = tree.find((item) => {\n        return item.type === systemTypes.dir && item.unfolded === true\n      })\n      if (unfoldeditem) {\n        this.updateFoldState({\n          tree: unfoldeditem.children,\n          currentColIdx: currentColIdx + 1,\n          targetColIdx,\n          rowIdx,\n          foldState,\n        })\n      }\n    }\n  }\n  handleFoldChange = (colIdx, rowIdx, foldState) => {\n    this.updateFoldState({\n      tree: this.state.tree,\n      currentColIdx: 0,\n      targetColIdx: colIdx,\n      rowIdx,\n      foldState,\n    })\n    this.setState({ tree: this.state.tree })\n  }\n  updateAllChildrenStatus = (tree, status) => {\n    tree.forEach((item) => {\n      if (item.type === systemTypes.file && item.loaded) {\n        item.checkingStatus = status\n      } else if (item.type === systemTypes.dir) {\n        this.updateAllChildrenStatus(item.children, status)\n      }\n    })\n  }\n  updateCheckingStatus = ({\n    tree,\n    currentColIdx,\n    targetColIdx,\n    rowIdx,\n    action,\n  }) => {\n    if (currentColIdx === targetColIdx) {\n      const row = tree[rowIdx]\n      const rowType = row.type\n      const targetStatus =\n        action === checkAction.check\n          ? checkingStatus.checked\n          : checkingStatus.notChecked\n      if (rowType === systemTypes.file) {\n        row.checkingStatus = targetStatus\n      } else if (rowType === systemTypes.dir) {\n        this.updateAllChildrenStatus(row.children, targetStatus)\n      }\n    } else {\n      const unfoldeditem = tree.find((item) => {\n        return item.type === systemTypes.dir && item.unfolded === true\n      })\n      if (unfoldeditem) {\n        this.updateCheckingStatus({\n          tree: unfoldeditem.children,\n          currentColIdx: currentColIdx + 1,\n          targetColIdx,\n          rowIdx,\n          action,\n        })\n      }\n    }\n  }\n  updateDirCheckingStatus = (tree) => {\n    tree.forEach((item) => {\n      if (item.type === systemTypes.dir) {\n        const dirStatus = this.updateDirCheckingStatus(item.children)\n        item.checkingStatus = dirStatus\n      }\n    })\n    const allChecked = tree.every(\n      (item) => item.checkingStatus === checkingStatus.checked\n    )\n    const someChecked = tree.some((item) =>\n      [checkingStatus.checked, checkingStatus.intermediate].includes(\n        item.checkingStatus\n      )\n    )\n    if (allChecked) {\n      return checkingStatus.checked\n    } else if (someChecked) {\n      return checkingStatus.intermediate\n    } else {\n      return checkingStatus.notChecked\n    }\n  }\n  handleCheckingStatusChange = (colIdx, rowIdx, action) => {\n    console.log(\n      '🚀 ~ file: index.js ~ line 127 ~ Main ~ colIdx, rowIdx, action',\n      colIdx,\n      rowIdx,\n      action\n    )\n    this.updateCheckingStatus({\n      tree: this.state.tree,\n      currentColIdx: 0,\n      targetColIdx: colIdx,\n      rowIdx,\n      action,\n    })\n    this.updateDirCheckingStatus(this.state.tree)\n    this.setState({ tree: this.state.tree })\n  }\n  loadMore = (currentColIdx, targetColIdx, tree) => {\n    if (currentColIdx === targetColIdx) {\n      let moreCount = 10\n      tree.forEach((row) => {\n        if (moreCount > 0 && !row.loaded) {\n          row.loaded = true\n          moreCount--\n        }\n      })\n    } else {\n      const unfoldeditem = tree.find((item) => {\n        return item.type === systemTypes.dir && item.unfolded === true\n      })\n      if (unfoldeditem) {\n        this.loadMore(currentColIdx + 1, targetColIdx, unfoldeditem.children)\n      }\n    }\n  }\n  handleLoadMoreClick = (colIdx) => {\n    this.loadMore(0, colIdx, this.state.tree)\n    this.setState({ tree: this.state.tree })\n  }\n  getColumns(tree, columns = [], colIdx = 0) {\n    columns.push(\n      <Column\n        tree={tree}\n        key={colIdx}\n        onRowFoldChange={(rowIdx, foldState) => {\n          this.handleFoldChange(colIdx, rowIdx, foldState)\n        }}\n        onRowCheckingStatusChange={(rowIdx, action) => {\n          this.handleCheckingStatusChange(colIdx, rowIdx, action)\n        }}\n        onLoadMoreClick={() => {\n          this.handleLoadMoreClick(colIdx)\n        }}\n      />\n    )\n    const unfoldedItem = tree.find((item) => {\n      return item.type === systemTypes.dir && item.unfolded === true\n    })\n    if (unfoldedItem) {\n      return this.getColumns(unfoldedItem.children, columns, colIdx + 1)\n    } else {\n      return columns\n    }\n  }\n  render() {\n    const columns = this.getColumns(this.state.tree)\n    return <div className=\"columns\">{columns}</div>\n  }\n}\n\nexport default Main\n","// import './App.css';\nimport Main from './pages/main/index'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}